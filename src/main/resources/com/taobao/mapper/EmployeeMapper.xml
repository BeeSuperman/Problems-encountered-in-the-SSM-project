<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.taobao.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.taobao.domain.Employee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="realname" property="realname" jdbcType="VARCHAR" />
    <result column="tel" property="tel" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="inputtime" property="inputtime" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="BIT" />
    <result column="admin" property="admin" jdbcType="BIT" />
    <association property="department" javaType="com.taobao.domain.Department" columnPrefix="d_">
      <result property="id" column="id"/>
      <result property="name" column="name"/>
      <result property="sn" column="sn"/>
      <result property="managerId" column="managerId"/>
      <result property="parentId" column="parentId"/>
      <result property="state" column="state"/>
    </association>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <!--添加员工-->
  <insert id="insert" parameterType="com.taobao.domain.Employee" useGeneratedKeys="true" keyProperty="id" >
    insert into employee (
    id,
    username,
    password,
    inputtime,
    tel,
    email,
    state,
    admin,
    dep_id)
    values (#{id}, #{username},#{password}, #{inputtime},
      #{tel}, #{email}, #{state}, #{admin},
      #{department.id})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.taobao.domain.Employee" >
    update employee
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      realname = #{realname,jdbcType=VARCHAR},
      tel = #{tel,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      inputtime = #{inputtime,jdbcType=TIMESTAMP},
  <!-- state = #{state,jdbcType=BIT},状态想单独的通过离职按钮操作，所以这里不传进来了，此刻穿进来是null-->
      admin = #{admin,jdbcType=BIT},
        dep_id = #{department.id}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <!--设置员工离职状态-->
  <update id="updateState">

    update employee set state=false where id=#{id}

  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, username, password, realname, tel, email, inputtime, state, admin, dep_id
    from employee
    where id = #{id,jdbcType=BIGINT}
  </select>

  <sql id="where_sql">
    <where>
      <if test="keyword !=null and keyword !=''">
        and e.username like concat('%',#{keyword},'%')
        or e.tel like concat('%',#{keyword},'%')
        or e.email like concat('%',#{keyword},'%')
      </if>
    </where>
  </sql>
  <select id="selectAll" resultMap="BaseResultMap" >
    select
    e.id,
    e.username,
    e.password,
    e.realname,
     e.tel,
      e.email,
      e.inputtime,
       e.state,
        e.admin,
        d.id as d_id,
        d.name as d_name,
         d.sn as d_sn,
         d.manager_Id as d_managerId,
         d.parent_Id as d_parentId,
         d.state as d_state
    from employee as e left join department  as d on  d.id=e.dep_id
    <include refid="where_sql"/>
    order by e.id desc
  </select>
  <!--保存员工和角色 关系-->
  <insert id="insertEmployeeAndRoleRel" parameterType="java.lang.Long">
    insert into employee_role_rel(eid,rid) values (#{id},#{rid})
  </insert>
  <delete id="deleteRoleRel">
      delete  from employee_role_rel where eid=#{id}
  </delete>
  <!--根据用户名当中查询有没有当前用户-->
  <select id="getEmployeeWithUserName" resultType="com.taobao.domain.Employee">
      select  * from employee where  username = #{username}
  </select>
  <!--根据用户的id查询角色编号名称-->
  <select id="getRolesById" resultType="java.lang.String">

    SELECT r.rnum from employee_role_rel as er
    LEFT JOIN role as r
    ON er.rid = r.rid
    WHERE eid = #{id}

  </select>
  <!--根据用户的id查询权限 资源名称-->
  <!--
    1.查询出所有的角色和权限
    2.筛选出当前用户有哪些角色
  -->
  <select id="getPermissionById" resultType="java.lang.String">

    SELECT DISTINCT p.presource from role_permission_rel as rp
    LEFT JOIN permission as p
    ON rp.pid = p.pid WHERE rid in(SELECT rid FROM employee_role_rel WHERE eid = #{id});

  </select>
</mapper>